
########## RedBear_Duo build rules
# ---------------------------------

name=RedBear IoT Boards

tools.arm_none_eabi_gcc.path         = {runtime.tools.arm-none-eabi-gcc-redbear-4.9-2015-q3.path}/bin/
tools.arm_none_eabi_gcc.as           = arm-none-eabi-as
tools.arm_none_eabi_gcc.gcc          = arm-none-eabi-gcc
tools.arm_none_eabi_gcc.g++          = arm-none-eabi-g++
tools.arm_none_eabi_gcc.ar           = arm-none-eabi-ar
tools.arm_none_eabi_gcc.objcopy      = arm-none-eabi-objcopy
tools.arm_none_eabi_gcc.size         = arm-none-eabi-size

###### Compile s files
tools.arm_none_eabi_gcc.s.asflags    = 
recipe.s.o.pattern                   = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.as}" {tools.arm_none_eabi_gcc.s.asflags} "{source_file}" -o "{object_file}"

###### Compile c files
tools.arm_none_eabi_gcc.c.defines    = 
tools.arm_none_eabi_gcc.c.includes   = 
tools.arm_none_eabi_gcc.c.cflags     = -c -g3 -gdwarf-2 -Os -mcpu=cortex-m3 -mthumb -w -std=gnu99 -fno-common -fmessage-length=0 -Wall -fno-exceptions -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc -ffunction-sections -fdata-sections -fomit-frame-pointer -nostdlib --param max-inline-insns-single=500 -fno-exceptions -fno-rtti
tools.arm_none_eabi_gcc.c.conlyflags = 
recipe.c.o.pattern                   = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.gcc}" -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} {tools.arm_none_eabi_gcc.c.defines} {includes} {tools.arm_none_eabi_gcc.c.includes} {tools.arm_none_eabi_gcc.c.cflags} {tools.arm_none_eabi_gcc.c.conlyflags} -c -o "{object_file}" "{source_file}"

###### Compile cpp files
tools.arm_none_eabi_gcc.cpp.defines  = -DDFU_BUILD_ENABLE -DINCLUDE_PLATFORM=1 -DLOG_INCLUDE_SOURCE_INFO=1 -DLOG_MODULE_CATEGORY="app" -DMODULAR_FIRMWARE=1 -DMODULE_DEPENDENCY=4,2,9 -DMODULE_FUNCTION=5 -DMODULE_INDEX=1 -DMODULE_VERSION=9 -DPARTICLE=1 -DPARTICLE_NO_ARDUINO_COMPATIBILITY=0 -DPARTICLE_USER_MODULE -DPLATFORM_ID=88 -DPLATFORM_NAME=duo -DPLATFORM_THREADING=1 -DPRODUCT_FIRMWARE_VERSION=65535 -DPRODUCT_ID=88 -DRELEASE_BUILD -DRESET_AVRDUDE_FLASHER_SERIAL_SPEED=1200 -DSPARK=1 -DSPARK_PLATFORM -DSPARK_PLATFORM_NET=BCM43438A1 -DSTART_AVRDUDE_FLASHER_SERIAL_SPEED=19200 -DSTART_DFU_FLASHER_SERIAL_SPEED=14400 -DSTART_YMODEM_FLASHER_SERIAL_SPEED=28800 -DSTM32F2XX -DSTM32_DEVICE -DSYSTEM_VERSION_STRING=0.3.1 -DUSBD_PID_CDC=0xC058 -DUSBD_PID_DFU=0xD058 -DUSBD_VID_SPARK=0x2B04 -DUSER_FIRMWARE_IMAGE_LOCATION=0x80C0000 -DUSER_FIRMWARE_IMAGE_SIZE=0x40000 -DUSE_CS=A2 -DUSE_SPI=SPI -DUSE_STDPERIPH_DRIVER -DUSE_THREADING=0 -D_GNU_SOURCE -D_WINSOCK_H
tools.arm_none_eabi_gcc.cpp.includes = "-I{build.core.path}/firmware/communication/src" "-I{build.core.path}/firmware/dynalib/inc" "-I{build.core.path}/firmware/hal/inc" "-I{build.core.path}/firmware/hal/shared" "-I{build.core.path}/firmware/hal/src/duo" "-I{build.core.path}/firmware/hal/src/duo/libraries/btstack/port" "-I{build.core.path}/firmware/hal/src/duo/libraries/btstack/src" "-I{build.core.path}/firmware/hal/src/duo/libraries/btstack/src/ble" "-I{build.core.path}/firmware/hal/src/duo/libraries/btstack/src/classic" "-I{build.core.path}/firmware/hal/src/stm32" "-I{build.core.path}/firmware/hal/src/stm32f2xx" "-I{build.core.path}/firmware/platform/MCU/STM32F2xx/CMSIS/Device/ST/Include" "-I{build.core.path}/firmware/platform/MCU/STM32F2xx/CMSIS/Include" "-I{build.core.path}/firmware/platform/MCU/STM32F2xx/SPARK_Firmware_Driver/inc" "-I{build.core.path}/firmware/platform/MCU/STM32F2xx/STM32_StdPeriph_Driver/inc" "-I{build.core.path}/firmware/platform/MCU/STM32F2xx/STM32_USB_Device_Driver/inc" "-I{build.core.path}/firmware/platform/MCU/STM32F2xx/STM32_USB_Host_Driver/inc" "-I{build.core.path}/firmware/platform/MCU/STM32F2xx/STM32_USB_OTG_Driver/inc" "-I{build.core.path}/firmware/platform/MCU/shared/STM32/inc" "-I{build.core.path}/firmware/platform/shared/inc" "-I{build.core.path}/firmware/services/inc" "-I{build.core.path}/firmware/system/inc" "-I{build.core.path}/firmware/wiring/inc" "-I{build.core.path}/firmware/user/inc"
tools.arm_none_eabi_gcc.cpp.cflags   = -g3 -gdwarf-2 -Os -mcpu=cortex-m3 -mthumb -MD -MP -MF "{build.path}/{build.project_name}.o.d" -ffunction-sections -fdata-sections -Wall -Wno-switch -Wno-error=deprecated-declarations -fmessage-length=0 -fno-strict-aliasing -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc
tools.arm_none_eabi_gcc.cpp.cppflags = -fno-exceptions -fno-rtti -fcheck-new -std=gnu++11
recipe.cpp.o.pattern                   = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.gcc}" -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} {tools.arm_none_eabi_gcc.cpp.defines} {includes} {tools.arm_none_eabi_gcc.cpp.includes} {tools.arm_none_eabi_gcc.cpp.cflags} {tools.arm_none_eabi_gcc.cpp.cppflags} -c -o "{object_file}" "{source_file}"

###### Create archives
tools.arm_none_eabi_gcc.a.arflags    = rcs
app_archive_file                     = {build.path}/libcore.a
recipe.ar.pattern                    = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.ar}" {tools.arm_none_eabi_gcc.a.arflags} "{app_archive_file}" "{object_file}"

###### Create elf file
tools.arm_none_eabi_gcc.elf.objects  = "{build.core.path}/libs/module_info.o" "{build.core.path}/libs/newlib_stubs.o" "{build.core.path}/libs/user_export.o" "{build.core.path}/libs/user_module.o"
tools.arm_none_eabi_gcc.elf.lds      = {runtime.platform.path}/variants/RedBear_Duo/linker_scripts/gcc/duo/user-part/linker.ld
tools.arm_none_eabi_gcc.elf.cflags   = -g3 -gdwarf-2 -Os -mcpu=cortex-m3 -mthumb -fno-builtin -Werror -MD -MP -MF "{build.path}/{build.project_name}.elf.d" -ffunction-sections -fdata-sections -Wall -Wno-switch -Wno-error=deprecated-declarations -fmessage-length=0 -fno-strict-aliasing -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc
tools.arm_none_eabi_gcc.elf.ldflags  = -Wl,--whole-archive "{build.core.path}/libs/STM32F2xx_Peripheral_Libraries.a" -Wl,--no-whole-archive -nostartfiles -Xlinker --gc-sections -Wl,--whole-archive -lhal-dynalib -lservices-dynalib -lsystem-dynalib -lrt-dynalib -lwiring -lcommunication-dynalib -lplatform -lwiring_globals -Wl,--no-whole-archive -lnosys --specs=nano.specs "-T{tools.arm_none_eabi_gcc.elf.lds}" -Wl,--defsym,USER_FIRMWARE_IMAGE_SIZE=0x40000 -Wl,--defsym,USER_FIRMWARE_IMAGE_LOCATION=0x80C0000 -Wl,-Map,{build.path}/{build.project_name}.map
tools.arm_none_eabi_gcc.elf.libpath  = "-L{build.core.path}/libs"
tools.arm_none_eabi_gcc.elf.ldspath  = "-L{runtime.platform.path}/variants/RedBear_Duo/linker_scripts/linker" "-L{runtime.platform.path}/variants/RedBear_Duo/linker_scripts/linker/stm32f2xx" "-L{runtime.platform.path}/variants/RedBear_Duo/linker_scripts/gcc/duo/system-part1" "-L{runtime.platform.path}/variants/RedBear_Duo/linker_scripts/gcc/duo/system-part2" "-L{runtime.platform.path}/variants/RedBear_Duo/linker_scripts/gcc/duo/user-part" "-L{runtime.platform.path}/variants/RedBear_Duo/linker_scripts/gcc/shared/stm32f2xx"
recipe.c.combine.pattern             = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.g++}" {tools.arm_none_eabi_gcc.elf.cflags} {tools.arm_none_eabi_gcc.elf.objects} {object_files} --output "{build.path}/{build.project_name}.elf" {tools.arm_none_eabi_gcc.elf.ldspath} {tools.arm_none_eabi_gcc.elf.libpath} {tools.arm_none_eabi_gcc.elf.ldflags}

###### Create bin file
tools.arm_none_eabi_gcc.bin.flags    = -O binary
recipe.objcopy.eep.pattern           = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.objcopy}" {tools.arm_none_eabi_gcc.bin.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

###### Append CRC32
recipe.hooks.postbuild.0.pattern     = "{runtime.platform.path}/tools/crc32/{runtime.os}/sh" "{runtime.platform.path}/tools/crc32/{runtime.os}/crc32.sh" "{build.path}/{build.project_name}.bin" "{runtime.platform.path}/tools/crc32/{runtime.os}" "{tools.arm_none_eabi_gcc.path}"

###### Create hex file
tools.arm_none_eabi_gcc.elf2hex.flags= -O ihex
tools.arm_none_eabi_gcc.bin2hex.flags= -O ihex -I binary 
#recipe.objcopy.hex1.pattern         = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.objcopy}" {tools.arm_none_eabi_gcc.elf2hex.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}_raw.hex"  
#recipe.objcopy.hex2.pattern         = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.objcopy}" {tools.arm_none_eabi_gcc.bin2hex.flags} "{build.path}/{build.project_name}.bin" "{build.path}/{build.project_name}.hex" 

###### Compute size
recipe.size.pattern                  = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.size}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex                    = \.text\s+([0-9]+).*

###### Save target files
recipe.output.tmp_file               = {build.project_name}.bin
recipe.output.save_file              = {build.project_name}.bin 

###### Preprocessor
preproc.includes.flags               = -w -x c++ -M -MG -MP
recipe.preproc.includes              = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.g++}" {preproc.includes.flags} {tools.arm_none_eabi_gcc.cpp.cflags} {tools.arm_none_eabi_gcc.cpp.cppflags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {tools.arm_none_eabi_gcc.cpp.defines} {includes} {tools.arm_none_eabi_gcc.cpp.includes} "{source_file}"
preproc.macros.flags                 = -w -x c++ -E -CC
recipe.preproc.macros                = "{tools.arm_none_eabi_gcc.path}{tools.arm_none_eabi_gcc.g++}" {preproc.macros.flags} {tools.arm_none_eabi_gcc.cpp.cflags} {tools.arm_none_eabi_gcc.cpp.cppflags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {tools.arm_none_eabi_gcc.cpp.defines} {includes} {tools.arm_none_eabi_gcc.cpp.includes} "{source_file}" -o "{preprocessed_file_path}"



########## RedBear_Duo upload tools
# ----------------------------------

###### DFU util

tools.fw_loader.path={runtime.platform.path}/tools/fw_loader/{runtime.os}
tools.fw_loader.cmd=fw-load
tools.fw_loader.cmd.windows=fw-load.bat

tools.fw_loader.erase.params.verbose=
tools.fw_loader.erase.params.quiet=
tools.fw_loader.erase.pattern=

tools.fw_loader.bootloader.params.verbose=
tools.fw_loader.bootloader.params.quiet=
tools.fw_loader.bootloader.pattern="{path}/{cmd}" {path}/dfu-util {runtime.platform.path}/firmwares

###### AVR DUDE

tools.avrdude.cmd.path={runtime.tools.avrdude.path}/bin/avrdude
tools.avrdude.config.path={runtime.platform.path}/avrdude_conf/avrdude.conf 

tools.avrdude.cmd.path.linux={runtime.tools.avrdude.path}/bin/avrdude
tools.avrdude.config.path.linux={runtime.platform.path}/avrdude_conf/avrdude.conf

tools.avrdude.upload.params.verbose=-v -v -v -v
tools.avrdude.upload.params.quiet=-q -q
tools.avrdude.upload.pattern="{cmd.path}" "-C{config.path}" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D "-Uflash:w:{build.path}/{build.project_name}.bin.hex:i"

###### OpenOCD tool

tools.openocd.path={runtime.tools.openocd.path}
tools.openocd.cmd=bin/openocd
tools.openocd.cmd.windows=bin/openocd.exe

tools.openocd.upload.params.verbose=-d1
tools.openocd.upload.params.quiet=-d0
tools.openocd.upload.pattern="{path}/{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "program {{{build.path}/{build.project_name}.bin}} verify reset exit 0x80c0000"

tools.openocd.program.params.verbose=-d2
tools.openocd.program.params.quiet=-d0
tools.openocd.program.pattern=

tools.openocd.erase.params.verbose=-d3
tools.openocd.erase.params.quiet=-d0
tools.openocd.erase.pattern=

tools.openocd.bootloader.params.verbose=-d1
tools.openocd.bootloader.params.quiet=-d0
tools.openocd.bootloader.pattern="{path}/{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "init; reset halt; Unlock (); reset halt; program {{{runtime.platform.path}/firmwares/{bootloader.bootloader_file}}} verify {bootloader.bootloader_loc}; program {{{runtime.platform.path}/firmwares/{bootloader.system_part1_file}}} verify {bootloader.system_part1_loc}; program {{{runtime.platform.path}/firmwares/{bootloader.system_part2_file}}} verify {bootloader.system_part2_loc}; program {{{runtime.platform.path}/firmwares/{bootloader.user_part_file}}} verify reset exit {bootloader.user_part_loc}"

